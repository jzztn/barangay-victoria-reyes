generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  authorized    Boolean    @default(true)
  accounts      Account[]
  sessions      Session[]
  records       Resident[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resident {
  id           String        @id @default(cuid())
  verified     Boolean       @default(false)
  firstName    String
  middleName   String
  lastName     String
  gender       Gender
  birthdate    DateTime
  birthplace   String
  address      String
  occupation   String
  contact      String
  homeowner    Boolean
  voter        Boolean
  relationship Relationship?
  startedAt    DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  with         Resident?     @relation("Related", fields: [withId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  withId       String?
  members      Resident[]    @relation("Related")
  author       User?         @relation(fields: [authorId], references: [id])
  authorId     String?
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Relationship {
  FATHER
  MOTHER
  SON
  DAUGHTER
  HUSBAND
  WIFE
  BROTHER
  SISTER
  GRANDFATHER
  GRANDMOTHER
  GRANDSON
  GRANDDAUGHTER
  UNCLE
  AUNT
  NEWPHEW
  NIECE
  COUSIN
  BOYFRIEND
  GIRLFRIEND
  OTHERS
}
